Index: VirtualBox-5.1.22/src/VBox/Additions/linux/drm/vbox_ttm.c
===================================================================
--- VirtualBox-5.1.22.orig/src/VBox/Additions/linux/drm/vbox_ttm.c
+++ VirtualBox-5.1.22/src/VBox/Additions/linux/drm/vbox_ttm.c
@@ -231,7 +231,6 @@ static int vbox_bo_move(struct ttm_buffe
     return r;
 }
 
-
 static void vbox_ttm_backend_destroy(struct ttm_tt *tt)
 {
     ttm_tt_fini(tt);
Index: VirtualBox-5.1.22/src/VBox/Runtime/r0drv/linux/alloc-r0drv-linux.c
===================================================================
--- VirtualBox-5.1.22.orig/src/VBox/Runtime/r0drv/linux/alloc-r0drv-linux.c
+++ VirtualBox-5.1.22/src/VBox/Runtime/r0drv/linux/alloc-r0drv-linux.c
@@ -35,7 +35,7 @@
 #include <iprt/assert.h>
 #include <iprt/err.h>
 #include "r0drv/alloc-r0drv.h"
-
+#include <linux/kmemleak.h>
 
 #if (defined(RT_ARCH_AMD64) || defined(DOXYGEN_RUNNING)) && !defined(RTMEMALLOC_EXEC_HEAP)
 # if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 23)
@@ -294,6 +294,7 @@ DECLHIDDEN(int) rtR0MemAllocEx(size_t cb
                 fFlags &= ~RTMEMHDR_FLAG_KMALLOC;
                 pHdr = vmalloc(cb + sizeof(*pHdr));
             }
+	    kmemleak_not_leak(pHdr);
         }
         else
             pHdr = vmalloc(cb + sizeof(*pHdr));

